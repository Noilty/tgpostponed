<?php

declare(strict_types=1);

#!/usr/bin/php

/**
 * tgpostponed
 * –≠—Ç–æ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π PHP-—Å–∫—Ä–∏–ø—Ç, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç.
 *
 * cd \public $ php -f index.php prod
 */

if ('cli' !== PHP_SAPI) {
    throw new Exception('–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.');
}

if (2 !== $argv && ! in_array($env = $argv[1], $envs = ['dev', 'prod'])) {
    throw new Exception('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: php -f index.php ' . implode('|', $envs));
}

# ----------------------------------------------------------------------------------------------------------------------

require '../vendor/autoload.php';
require "../constants.$env.php";

use GuzzleHttp\Client;
use GuzzleHttp\Exception\RequestException;
use Ramsey\Uuid\Uuid;
use Symfony\Component\HttpFoundation\Response;
use Psr\Http\Message\ResponseInterface;

const HTTP_OK = Response::HTTP_OK;
const HTTP_TOO_MANY_REQUESTS = Response::HTTP_TOO_MANY_REQUESTS;

$client = new Client([
    'base_uri' => $baseUri = strReplaceAssoc([
        ':token' => TG_CHANNEL_BOT_TOKEN,
    ], 'https://api.telegram.org/bot:token/'),
]);

$folders = getData(FTP_DIR);

while (true) {
    $randomFolder = getRandomElem($folders);

    $dirRandom = FTP_DIR . $randomFolder;
    $dirPublished = "$dirRandom/published";
    $dirUnpublished = "$dirRandom/unpublished";

    $listImg = getData($dirUnpublished);
    if (empty($listImg)) {
        echo writelnRed("|-- –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.\r\n|   |-- $dirUnpublished") . PHP_EOL;
        continue;
    }

    $imgName = getRandomElem($listImg);
    $imgPath = "$dirUnpublished/$imgName";
    $imgInfo = pathinfo($imgPath);

    if (! file_exists($imgPath)) {
        throw new Exception("–û—à–∏–±–∫–∞: –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª ($imgPath) –Ω–µ –Ω–∞–π–¥–µ–Ω.");
    }

    [$imgDirname, $imgBasename, $imgExtension, $imgFilename] = array_values($imgInfo);

    $imgUuid = prepareUuid($imgFilename);

    try {
        $res = $client->post('sendPhoto', [
            'multipart' => prepareMultipart([
                'chat_id' => TG_CHANNEL,
                'photo' => fopen($imgPath, 'r'),
                'caption' => "`" . strtoupper($imgUuid) . "`" . "\r\nüè∑ #$randomFolder" . TG_CHANNEL,
                'disable_notification' => true,
                'parse_mode' => 'markdown',
            ]),
        ]);
    } catch (RequestException $e) {
        /**
         * @var ?ResponseInterface
         */
        $res = $e->getResponse();
        /**
         * @var string
         */
        $resBody = $res->getBody()->getContents();
        /**
         * @var array
         */
        $resData = json_decode($resBody, true);

        /**
         * @var bool
         */
        $status = $resData['ok'];
        /**
         * @var int
         */
        $statusCode = $resData['error_code'];
        /**
         * @var array
         */
        $parameters = $resData['parameters'];
        /**
         * @var int
         */
        $retryAfter = $parameters['retry_after'];

        if (! $status && $statusCode === HTTP_TOO_MANY_REQUESTS) {
            echo "start sleep($retryAfter)" . PHP_EOL;
            sleep($retryAfter);
        } else {
            throw new Exception("—Å—Ç–∞—Ç—É—Å –∫–æ–¥: $statusCode");
        }

        continue;
    } catch (Throwable $th) {
        throw new Exception($th->getMessage());
    }

    $statusCode = $res->getStatusCode();
    if ($statusCode !== HTTP_OK) {
        throw new Exception("–û—à–∏–±–∫–∞: —Ñ–æ—Ç–æ ($imgPath) –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Å—Ç–∞—Ç—É—Å –∫–æ–¥: $statusCode.");
    } else {
        echo "|-- –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω." . PHP_EOL;
    }

    $from = $imgPath;
    $to = "$dirPublished/$imgUuid.$imgExtension";
    if (! rename($from, $to)) {
        throw new Exception('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª.');
    }

    echo "|-- –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω.\r\n|   |-- $from\r\n|   |-- $to" . PHP_EOL;

    sleep(rand(0, 3));
}

# ----------------------------------------------------------------------------------------------------------------------

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞—è —Å–ª—É–∂–µ–±–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
 *
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –∏ —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ. 
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ —É–±—ã–≤–∞–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —Ç–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã, 
 * –∫–∞–∫ `.` (—Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è), `..` (—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è) –∏ `_from_sort`.
 *
 * @param string $dir –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å.
 * 
 * @return array –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç —Å–ª—É–∂–µ–±–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
 * 
 * @throws Exception –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
 */
function getData(string $dir): array
{
    if (! is_dir($dir)) {
        throw new Exception('–ü—É—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    }

    $data = scandir($dir, SCANDIR_SORT_DESCENDING);

    return array_filter($data, fn(string $file): bool  => ! in_array($file, ['.', '..', '_from_sort']));
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞.
 *
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ `$elems` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –Ω–µ–≥–æ.
 *
 * @param array $elems –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.
 * 
 * @return string –°–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞.
 * 
 * @throws ValueError –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç (PHP –≤—ã–±—Ä–æ—Å–∏—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –≤—ã–∑–æ–≤–µ array_rand).
 */
function getRandomElem(array $elems): string
{
    return $elems[array_rand($elems)];
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ multipart-–∑–∞–ø—Ä–æ—Å–æ–≤.
 *
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ `$params` –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤, 
 * –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –º–∞—Å—Å–∏–≤ —Å –∫–ª—é—á–∞–º–∏ `name` (–∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞) –∏ `contents` (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞).
 * –¢–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –æ–±—ã—á–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ multipart-–∑–∞–ø—Ä–æ—Å–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π Guzzle.
 *
 * @param array $params –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∫–ª—é—á–∏ ‚Äî –∏–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ).
 * 
 * @return array –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ multipart (–∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç `name` –∏ `contents`).
 */
function prepareMultipart(array $params): array
{
    return array_map(fn($key, $value) => [
        'name' => $key,
        'contents' => $value,
    ], array_keys($params), $params);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º UUID, –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π.
 *
 * –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ `$filename` –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º UUID, —Ç–æ 
 * —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π UUID. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å–∞–º–æ –∑–Ω–∞—á–µ–Ω–∏–µ `$filename`.
 *
 * @param string $filename –°—Ç—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç—É UUID.
 * @return string –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º UUID (–ª–∏–±–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ª–∏–±–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π UUID).
 * 
 * @throws Exception –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å UUID.
 */
function prepareUuid(string $filename): string
{
    return ! Uuid::isValid($filename) ? generateUuid() : $filename;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä UUID –≤–µ—Ä—Å–∏–∏ 4.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å UUID (–Ω–∞–ø—Ä–∏–º–µ—Ä, `ramsey/uuid`), —á—Ç–æ–±—ã 
 * —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–µ—Ä—Å–∏–∏ 4 (—Å–ª—É—á–∞–π–Ω—ã–π).
 *
 * @return string –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ UUID –≤–µ—Ä—Å–∏–∏ 4.
 * 
 * @throws Exception –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å UUID.
 */
function generateUuid(): string
{
    return Uuid::uuid4()->toString();
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–º–µ–Ω—É —Å—Ç—Ä–æ–∫ –ø–æ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–º—É –º–∞—Å—Å–∏–≤—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.
 *
 * –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ `$replace` —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ, –≥–¥–µ –∫–ª—é—á–∏ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã
 * –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ `$subject`.
 *
 * @param array $replace –ê—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ –∑–∞–º–µ–Ω (–∫–ª—é—á–∏ ‚Äî —á—Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å, –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –Ω–∞ —á—Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å).
 * @param string $subject –°—Ç—Ä–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞–º–µ–Ω—ã.
 * 
 * @return string –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞–º–µ–Ω–∞–º–∏.
 */
function strReplaceAssoc(array $replace, string $subject): string
{
    return str_replace(array_keys($replace), array_values($replace), $subject);
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏.
 *
 * –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤ `$array` –∏ –º–∞—Å—Å–∏–≤ `$keys`, 
 * —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.
 *
 * @param array $array –ò—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤.
 * @param array $keys –ú–∞—Å—Å–∏–≤ –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–µ–º –º–∞—Å—Å–∏–≤–µ.
 * 
 * @return array –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏.
 */
function arrayOnly(array $array, array $keys): array
{
    return array_intersect_key($array, array_flip((array) $keys));
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
 *
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≤—ã–≤–æ–¥–∏—Ç –∏—Ö –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 * —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º `var_export` –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤ —Ç–µ–≥ `<pre>` –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
 *
 * @param mixed ...$data –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.
 * 
 * @return void
 */
function dump(...$data): void
{
    echo '<pre>' . var_export($data, true);
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞.
 *
 * –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ `dump`, –Ω–æ –ø–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–∑—ã–≤–∞–µ—Ç `die()`, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞.
 * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
 *
 * @param mixed ...$data –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–≤–æ–¥–∞.
 * 
 * @return void
 */
function dd(...$data): void
{
    dump(...$data);
    die();
}

/**
 * –í—ã–≤–æ–¥–∏—Ç —Ü–≤–µ—Ç–Ω–æ–π —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫–∏
 * 
 * @param string $text –¢–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
 * 
 * @param string $color –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
 * 
 * @return string –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å ANSI-–∫–æ–¥–∞–º–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
 */
function writeln(string $text, string $color = 'default'): string
{
    $colors = [
        'black'   => '0;30',
        'red'     => '0;31',
        'green'   => '0;32',
        'yellow'  => '0;33',
        'blue'    => '0;34',
        'magenta' => '0;35',
        'cyan'    => '0;36',
        'white'   => '0;37',
        'default' => '0;39',
    ];

    $colorCode = $colors[$color] ?? $colors['default'];

    return "\033[{$colorCode}m{$text}\033[0m";
}

function writelnRed(string $text): string
{
    return writeln($text, 'red');
}
